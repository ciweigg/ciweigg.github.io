<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如果没有你</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ciweigg.github.io/"/>
  <updated>2018-01-19T03:01:28.110Z</updated>
  <id>https://ciweigg.github.io/</id>
  
  <author>
    <name>Ciwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7安装Docker</title>
    <link href="https://ciweigg.github.io/2018/01/19/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://ciweigg.github.io/2018/01/19/Centos7安装Docker/</id>
    <published>2018-01-19T02:53:00.000Z</published>
    <updated>2018-01-19T03:01:28.110Z</updated>
    
    <content type="html"><![CDATA[<p> Docker 是由 Go 语言编写，一个快速部署的 轻量级虚拟技术项目，它允许开发人员把自己的程序 和 开发环境一起打包，制作成一个 Docker 的image（镜像），这样部署到服务器上，也只需要下载这个 image 镜像将程序跑起来，免去了每次安装依赖和环境的麻烦，还能做到应用间的隔离<br><a id="more"></a></p><h3 id="下载源"><a href="#下载源" class="headerlink" title="下载源"></a>下载源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  -y  install docker-engine</span><br></pre></td></tr></table></figure><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><p>docker常用命令：<br>systemctl stop docker<br>systemctl start docker<br>systemctl status docker</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Docker 是由 Go 语言编写，一个快速部署的 轻量级虚拟技术项目，它允许开发人员把自己的程序 和 开发环境一起打包，制作成一个 Docker 的image（镜像），这样部署到服务器上，也只需要下载这个 image 镜像将程序跑起来，免去了每次安装依赖和环境的麻烦，还能做到应用间的隔离&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://ciweigg.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://ciweigg.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Async异步执行</title>
    <link href="https://ciweigg.github.io/2018/01/19/Spring%20Boot%20Async%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C/"/>
    <id>https://ciweigg.github.io/2018/01/19/Spring Boot Async异步执行/</id>
    <published>2018-01-19T02:19:12.000Z</published>
    <updated>2018-01-19T02:21:07.260Z</updated>
    
    <content type="html"><![CDATA[<p>异步调用就是不用等待结果的返回就执行后面的逻辑，同步调用则需要等带结果再执行后面的逻辑。</p><p>通常我们使用异步操作都会去创建一个线程执行一段逻辑，然后把这个线程丢到线程池中去执行，代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(10);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 业务逻辑</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>这样的方式看起来没那么优雅，尽管用了java的lambda。在Spring Boot中有一种更简单的方式来执行异步操作，只需要一个@Async注解即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Async</span><br><span class="line">public void saveLog() &#123;</span><br><span class="line">    System.err.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以直接在Controller中调用这个业务方法，它就是异步执行的，会在默认的线程池中去执行。需要注意的是一定要在外部的类中去调用这个方法，如果在本类调用是不起作用的，比如this.saveLog()。 最后在启动类上开启异步任务的执行，添加@EnableAsync即可。</p><p>另外关于执行异步任务的线程池我们也可以自定义，首先我们定义一个线程池的配置类，用来配置一些参数，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;  </span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 异步任务线程池配置</span><br><span class="line"> * </span><br><span class="line"> * @author yinjihuan</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.task.pool&quot;)</span><br><span class="line">public class TaskThreadPoolConfig &#123; </span><br><span class="line"></span><br><span class="line">    //核心线程数</span><br><span class="line">    private int corePoolSize = 5;  </span><br><span class="line"></span><br><span class="line">    //最大线程数</span><br><span class="line">    private int maxPoolSize = 50;  </span><br><span class="line"></span><br><span class="line">    //线程池维护线程所允许的空闲时间</span><br><span class="line">    private int keepAliveSeconds = 60;  </span><br><span class="line"></span><br><span class="line">    //队列长度</span><br><span class="line">    private int queueCapacity = 10000;</span><br><span class="line"></span><br><span class="line">    //线程名称前缀</span><br><span class="line">    private String threadNamePrefix = &quot;FSH-AsyncTask-&quot;;</span><br><span class="line"></span><br><span class="line">    public String getThreadNamePrefix() &#123;</span><br><span class="line">        return threadNamePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setThreadNamePrefix(String threadNamePrefix) &#123;</span><br><span class="line">        this.threadNamePrefix = threadNamePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCorePoolSize() &#123;</span><br><span class="line">        return corePoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCorePoolSize(int corePoolSize) &#123;</span><br><span class="line">        this.corePoolSize = corePoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getMaxPoolSize() &#123;</span><br><span class="line">        return maxPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMaxPoolSize(int maxPoolSize) &#123;</span><br><span class="line">        this.maxPoolSize = maxPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getKeepAliveSeconds() &#123;</span><br><span class="line">        return keepAliveSeconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setKeepAliveSeconds(int keepAliveSeconds) &#123;</span><br><span class="line">        this.keepAliveSeconds = keepAliveSeconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getQueueCapacity() &#123;</span><br><span class="line">        return queueCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQueueCapacity(int queueCapacity) &#123;</span><br><span class="line">        this.queueCapacity = queueCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们重新定义线程池的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line">import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line">@Configuration  </span><br><span class="line">public class AsyncTaskExecutePool implements AsyncConfigurer &#123;    </span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(AsyncTaskExecutePool.class);</span><br><span class="line"></span><br><span class="line">    @Autowired    </span><br><span class="line">    private TaskThreadPoolConfig config;</span><br><span class="line"></span><br><span class="line">    @Override  </span><br><span class="line">    public Executor getAsyncExecutor() &#123;  </span><br><span class="line">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();  </span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());    </span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());    </span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());    </span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());    </span><br><span class="line">        executor.setThreadNamePrefix(config.getThreadNamePrefix());</span><br><span class="line">        //线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy</span><br><span class="line">        //AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 --&gt;</span><br><span class="line">        //CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 --&gt;</span><br><span class="line">        //DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span><br><span class="line">        //DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 --&gt;</span><br><span class="line">        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());  </span><br><span class="line">        executor.initialize();    </span><br><span class="line">        return executor;    </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    @Override  </span><br><span class="line">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;// 异步任务中异常处理  </span><br><span class="line">        return new AsyncUncaughtExceptionHandler() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void handleUncaughtException(Throwable arg0, Method arg1, Object... arg2) &#123;  </span><br><span class="line">                logger.error(&quot;==========================&quot;+arg0.getMessage()+&quot;=======================&quot;, arg0);  </span><br><span class="line">                logger.error(&quot;exception method:&quot; + arg1.getName());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完之后我们的异步任务执行的线程池就是我们自定义的了，我们可以通过在属性文件里面配置线程池的大小等等信息，也可以使用默认的配置：</p><p>spring.task.pool.maxPoolSize=100<br>最后讲下线程池配置的拒绝策略，当我们的线程数量高于线程池的处理速度时，任务会被缓存到本地的队列中，队列也是有大小的，如果超过了这个大小，我们需要有拒绝的策略，不然就会内存溢出了，目前支持2中拒绝策略：</p><p>AbortPolicy: 直接抛出java.util.concurrent.RejectedExecutionException异常<br>CallerRunsPolicy: 主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度<br>建议大家用CallerRunsPolicy策略，因为当队列中的任务满了之后，如果直接抛异常，那么这个任务就会被丢弃，如果是CallerRunsPolicy策略会用主线程去执行，就是同步执行，最起码这样任务不会丢弃。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步调用就是不用等待结果的返回就执行后面的逻辑，同步调用则需要等带结果再执行后面的逻辑。&lt;/p&gt;
&lt;p&gt;通常我们使用异步操作都会去创建一个线程执行一段逻辑，然后把这个线程丢到线程池中去执行，代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://ciweigg.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://ciweigg.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>swagger 注解使用</title>
    <link href="https://ciweigg.github.io/2018/01/19/swagger%20%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>https://ciweigg.github.io/2018/01/19/swagger 注解使用/</id>
    <published>2018-01-19T02:08:34.000Z</published>
    <updated>2018-01-19T02:13:58.422Z</updated>
    
    <content type="html"><![CDATA[<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。Swagger的目标是对REST API定义一个标准的和语言无关的接口，可让人和计算机无需访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过Swagger进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger消除了调用服务时可能会有的猜测。<br><a id="more"></a><br>关于Swagger的集成请参考：<a href="https://github.com/yinjihuan/spring-boot-starter-swagger" target="_blank" rel="noopener">https://github.com/yinjihuan/spring-boot-starter-swagger</a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>@Api 用在类上，说明该类的作用。可以标记一个Controller类做为swagger 文档资源，使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Api(value=&quot;企业用户控制器&quot;, tags=&#123;&quot;用户接口&quot;&#125;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class EnterpriseProductUserController &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>value：接口说明</li><li>tags：接口说明，可以在页面中显示。可以配置多个，当配置多个的时候，在页面中会显示多个接口的信息</li></ul><h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="ApiModel"></a>ApiModel</h3><p>@ApiModel用在类上，表示对类进行说明，用于实体类中的参数接收说明，使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(value = &quot;com.fangjia.fsh.user.query.LoginQuery&quot;, description = &quot;登录参数&quot;)</span><br><span class="line">public class LoginQuery &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="ApiModelProperty"></a>ApiModelProperty</h3><p>@ApiModelProperty()用于字段,表示对model属性的说明,使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(value = &quot;com.fangjia.fsh.user.query.LoginQuery&quot;, description = &quot;登录参数&quot;)</span><br><span class="line">public class LoginQuery &#123;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(value = &quot;企业编号&quot;, required = true)</span><br><span class="line">    private Long eid;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(value = &quot;用户编号&quot;, required = true)</span><br><span class="line">    private String uid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="ApiParam"></a>ApiParam</h3><p>@ ApiParam用于Controller中方法的参数说明，使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public ResponseData login(@ApiParam(value = &quot;登录参数&quot;, required = true) @RequestBody LoginQuery query) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>value：参数说明</li><li>required：是否必填</li></ul><h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="ApiOperation"></a>ApiOperation</h3><p>@ApiOperation用在Controller里的方法上，说明方法的作用，每一个接口的定义,使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = &quot;用户登录&quot;, notes = &quot;企业用户认证接口，参数为必填项&quot;)</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public ResponseData login(@ApiParam(value = &quot;登录参数&quot;, required = true) @RequestBody LoginQuery query) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>value：接口名称</li><li>notes：详细说明</li></ul><h3 id="ApiResponse和ApiResponses"><a href="#ApiResponse和ApiResponses" class="headerlink" title="ApiResponse和ApiResponses"></a>ApiResponse和ApiResponses</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ApiResponses(&#123; @ApiResponse(code = 403, message = &quot;无权限访问&quot;) &#125;)</span><br><span class="line">public ResponseData login(@ApiParam(value = &quot;登录参数&quot;, required = true) @RequestBody LoginQuery query) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>code：响应状态码</li><li>message：状态码对应的说明</li></ul><h3 id="ApiImplicitParam和ApiImplicitParams"><a href="#ApiImplicitParam和ApiImplicitParams" class="headerlink" title="ApiImplicitParam和ApiImplicitParams"></a>ApiImplicitParam和ApiImplicitParams</h3><p>用于方法上，为单独的请求参数进行说明，使用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">      @ApiImplicitParam(name=&quot;uid&quot;, value=&quot;用户ID&quot;, required=true, paramType=&quot;query&quot;, dataType=&quot;String&quot;, defaultValue=&quot;1&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">@GetMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(String uid) &#123;</span><br><span class="line">   return uid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>name：参数名，对应方法中单独的参数名称</li><li>value：参数中文说明</li><li>required：是否必填</li><li>paramType：参数类型，取值为path, query, body, header, form</li><li>dataType：参数数据类型</li><li>defaultValue：默认值</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。Swagger的目标是对REST API定义一个标准的和语言无关的接口，可让人和计算机无需访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过Swagger进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger消除了调用服务时可能会有的猜测。&lt;br&gt;
    
    </summary>
    
      <category term="swagger" scheme="https://ciweigg.github.io/categories/swagger/"/>
    
    
      <category term="swagger" scheme="https://ciweigg.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA基于Springboot的测试生产远程调试</title>
    <link href="https://ciweigg.github.io/2018/01/14/Intellij-IDEA%E5%9F%BA%E4%BA%8ESpringboot%E7%9A%84%E6%B5%8B%E8%AF%95%E7%94%9F%E4%BA%A7%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://ciweigg.github.io/2018/01/14/Intellij-IDEA基于Springboot的测试生产远程调试/</id>
    <published>2018-01-14T04:50:00.000Z</published>
    <updated>2018-01-14T04:55:22.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本篇博客介绍一下在Intellij IDEA下对Springboot类型的项目的远程调试功能。所谓的远程调试就是服务端程序运行在一台远程服务器上，我们可以在本地服务端的代码（前提是本地的代码必须和远程服务器运行的代码一致）中设置断点，每当有请求到远程服务器时时能够在本地知道远程服务端的此时的内部状态。<br><a id="more"></a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>首先，打开Edit configurations，点击+号，创建一个Remote应用。<br><img src="http://oisa91ton.bkt.clouddn.com/1515905506985cxng7pn0.png?imageslim" alt="paste image"></p><p>填写name，配置Host地址（远程服务器地址）和端口（选一个未被占用的端口）。然后复制For JDK1.4.x下面的参数，示例配置的端口为5005</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005</span><br></pre></td></tr></table></figure><p><img src="http://oisa91ton.bkt.clouddn.com/151590553445978inszc5.png?imageslim" alt="paste image"></p><p>经过以上步骤，已经获得了启动远程服务器的参数。在启动springboot时默认使用java命令来启动。<br>比如，示例项目启动命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar remotedebug-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><p>那么此时在启动命令上添加上面获得的参数（非springbboot项目，就是把多的那段配置添加到相应的环境变量即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005  remotedebug-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><p>这样服务端就监听在5005端口了。可以通过以下命令来检查是否监听成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 5005</span><br></pre></td></tr></table></figure></p><p>docker<br>如果应用是跑在容器中的，只需要修改Dockerfile即可。例子如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">COPY target/agents.jar /app.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">EXPOSE 5005</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot; ,&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&quot;,&quot;-Dspring.profiles.active=sit&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><p>通过以上步骤已经完成了服务器端参数的添加。下面启动刚才配置的Remote服务。在启动时候我们会发现此项启动程序只有debug启动模式。</p><p>启动完成，对需要debug的代码打上断点，剩下的操作步骤就是访问远程服务器对应的业务请求，本地就会同步debug。其余的操作与本地debug相同，测试环境调试可以这样操作，生产千万别这样测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;本篇博客介绍一下在Intellij IDEA下对Springboot类型的项目的远程调试功能。所谓的远程调试就是服务端程序运行在一台远程服务器上，我们可以在本地服务端的代码（前提是本地的代码必须和远程服务器运行的代码一致）中设置断点，每当有请求到远程服务器时时能够在本地知道远程服务端的此时的内部状态。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://ciweigg.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://ciweigg.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>接口的安全加密</title>
    <link href="https://ciweigg.github.io/2018/01/11/%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E5%8A%A0%E5%AF%86/"/>
    <id>https://ciweigg.github.io/2018/01/11/接口的安全加密/</id>
    <published>2018-01-11T10:21:14.000Z</published>
    <updated>2018-01-11T10:31:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>接口传输中如果全部是明文的话，很容易被人家模拟，那么就产生了sign的传输<br>我介绍的加密主要采用：<br>1.对所有传入参数按照字段名的 ASCII 码从小到大排序（字典序），并且生成url参数串<br>2.然后使用md5加密刚才拼接的字符串，字符串后面再拼上key<br>3.使用AES加密md5的签名后的数据，AESkey也使用上面的key<br><a id="more"></a></p><h3 id="首先需要将传入的数据非空的转换成map"><a href="#首先需要将传入的数据非空的转换成map" class="headerlink" title="首先需要将传入的数据非空的转换成map"></a>首先需要将传入的数据非空的转换成map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  /** </span><br><span class="line"> * 将对象装换为map </span><br><span class="line"> * @param bean </span><br><span class="line"> * @return </span><br><span class="line"> */</span><br><span class="line">public static &lt;T&gt; Map&lt;String, Object&gt; beanToMap(T bean) &#123; </span><br><span class="line">  Map&lt;String, Object&gt; map = Maps.newHashMap(); </span><br><span class="line">  if (bean != null) &#123; </span><br><span class="line">    BeanMap beanMap = BeanMap.create(bean); </span><br><span class="line">    for (Object key : beanMap.keySet()) &#123; </span><br><span class="line">      map.put(key+&quot;&quot;, beanMap.get(key)); </span><br><span class="line">    &#125;       </span><br><span class="line">  &#125; </span><br><span class="line">  return map; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ASCII-码从小到大排序（字典序），并且生成url参数串"><a href="#ASCII-码从小到大排序（字典序），并且生成url参数串" class="headerlink" title="ASCII 码从小到大排序（字典序），并且生成url参数串"></a>ASCII 码从小到大排序（字典序），并且生成url参数串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 方法用途: 对所有传入参数按照字段名的 ASCII 码从小到大排序（字典序），并且生成url参数串</span><br><span class="line">     * 实现步骤: </span><br><span class="line">     *</span><br><span class="line">     * @param paraMap    要排序的Map对象</span><br><span class="line">     * @param urlEncode  是否需要URLENCODE</span><br><span class="line">     * @param keyToLower 是否需要将Key转换为全小写</span><br><span class="line">     *                   true:key转化成小写，false:不转化</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String formatUrlMap(Map&lt;String, String&gt; paraMap, boolean urlEncode, boolean keyToLower) &#123;</span><br><span class="line">        String buff = &quot;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; tmpMap = paraMap;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;Map.Entry&lt;String, String&gt;&gt; infoIds = new ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(tmpMap.entrySet());</span><br><span class="line">            // 对所有传入参数按照字段名的 ASCII 码从小到大排序（字典序）</span><br><span class="line">            Collections.sort(infoIds, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public int compare(Map.Entry&lt;String, String&gt; o1, Map.Entry&lt;String, String&gt; o2) &#123;</span><br><span class="line">                    return (o1.getKey()).toString().compareTo(o2.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            // 构造URL 键值对的格式</span><br><span class="line">            StringBuilder buf = new StringBuilder();</span><br><span class="line">            for (Map.Entry&lt;String, String&gt; item : infoIds) &#123;</span><br><span class="line">                if (StringUtils.isNotBlank(item.getKey())) &#123;</span><br><span class="line">                    String key = item.getKey();</span><br><span class="line">                    String val = item.getValue();</span><br><span class="line">                    if (urlEncode) &#123;</span><br><span class="line">                        val = URLEncoder.encode(val, &quot;utf-8&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (keyToLower) &#123;</span><br><span class="line">                        buf.append(key.toLowerCase() + &quot;=&quot; + val);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        buf.append(key + &quot;=&quot; + val);</span><br><span class="line">                    &#125;</span><br><span class="line">                    buf.append(&quot;&amp;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            buff = buf.toString();</span><br><span class="line">            if (buff.isEmpty() == false) &#123;</span><br><span class="line">                buff = buff.substring(0, buff.length() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return buff;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="拼接key在上面排序后产生的字符串最后"><a href="#拼接key在上面排序后产生的字符串最后" class="headerlink" title="拼接key在上面排序后产生的字符串最后"></a>拼接key在上面排序后产生的字符串最后</h3><p>String ready  = formatUrlMap()+key</p><h3 id="md5签名"><a href="#md5签名" class="headerlink" title="md5签名"></a>md5签名</h3><p>md5(ready)</p><h3 id="DES加密md5字符串"><a href="#DES加密md5字符串" class="headerlink" title="DES加密md5字符串"></a>DES加密md5字符串</h3><p>DES KEY使用上面的 一般一个用户一个key的<br>DES(MD5)</p><p>可以使用Hutool的工具类：<br>DES des = SecureUtil.des(“String”.getBytes());</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口传输中如果全部是明文的话，很容易被人家模拟，那么就产生了sign的传输&lt;br&gt;我介绍的加密主要采用：&lt;br&gt;1.对所有传入参数按照字段名的 ASCII 码从小到大排序（字典序），并且生成url参数串&lt;br&gt;2.然后使用md5加密刚才拼接的字符串，字符串后面再拼上key&lt;br&gt;3.使用AES加密md5的签名后的数据，AESkey也使用上面的key&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://ciweigg.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://ciweigg.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Minio——AWS S3存储的开源实现</title>
    <link href="https://ciweigg.github.io/2018/01/10/Docker%E5%AE%89%E8%A3%85Minio%E2%80%94%E2%80%94AWS%20S3%E5%AD%98%E5%82%A8%E7%9A%84%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0/"/>
    <id>https://ciweigg.github.io/2018/01/10/Docker安装Minio——AWS S3存储的开源实现/</id>
    <published>2018-01-10T03:21:15.000Z</published>
    <updated>2018-01-10T03:30:37.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先安装docker："><a href="#首先安装docker：" class="headerlink" title="首先安装docker："></a>首先安装docker：</h3><p><a href="https://docs.minio.io/" target="_blank" rel="noopener">传送门</a></p><p>docker pull minio/minio</p><p>docker run -d -p 9000:9000 minio/minio server /data</p><a id="more"></a><h3 id="查看启动输出的秘钥："><a href="#查看启动输出的秘钥：" class="headerlink" title="查看启动输出的秘钥："></a>查看启动输出的秘钥：</h3><p>docker logs festive_northcutt</p><p>这2个是用来登陆后台的，保存即可：<br>AccessKey<br>SecretKey</p><h3 id="登陆后台"><a href="#登陆后台" class="headerlink" title="登陆后台"></a>登陆后台</h3><p><a href="http://ip:9000" target="_blank" rel="noopener">http://ip:9000</a></p><h3 id="java后台API"><a href="#java后台API" class="headerlink" title="java后台API"></a>java后台API</h3><p><a href="https://docs.minio.io/docs/java-client-quickstart-guide" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先安装docker：&quot;&gt;&lt;a href=&quot;#首先安装docker：&quot; class=&quot;headerlink&quot; title=&quot;首先安装docker：&quot;&gt;&lt;/a&gt;首先安装docker：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.minio.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;docker pull minio/minio&lt;/p&gt;
&lt;p&gt;docker run -d -p 9000:9000 minio/minio server /data&lt;/p&gt;
    
    </summary>
    
      <category term="分布式文件存储" scheme="https://ciweigg.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="分布式文件存储" scheme="https://ciweigg.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>基于redis的分布式锁组件，简单方便快捷接入项目</title>
    <link href="https://ciweigg.github.io/2018/01/08/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%BB%84%E4%BB%B6%EF%BC%8C%E7%AE%80%E5%8D%95%E6%96%B9%E4%BE%BF%E5%BF%AB%E6%8D%B7%E6%8E%A5%E5%85%A5%E9%A1%B9%E7%9B%AE/"/>
    <id>https://ciweigg.github.io/2018/01/08/基于redis的分布式锁组件，简单方便快捷接入项目/</id>
    <published>2018-01-08T03:01:00.000Z</published>
    <updated>2018-01-08T03:25:30.732Z</updated>
    
    <content type="html"><![CDATA[<p>使项目拥有分布式锁能力 <a href="https://github.com/kekingcn/spring-boot-klock-starter" target="_blank" rel="noopener">https://github.com/kekingcn/spring-boot-klock-starter</a><br>spring-boot-klock-starter<br>基于redis的分布式锁spring-boot starter组件，使得项目拥有分布式锁能力变得异常简单，支持spring boot，和spirng mvc等spring相关项目<br><a id="more"></a><br>快速开始<br>spring boot项目接入</p><p>1.添加lock starter组件依赖，目前还没上传到公共仓库，需要自己下源码build<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-klock-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>2.application.properties配置redis链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.klock.address=127.0.0.1:6379</span><br></pre></td></tr></table></figure></p><p>3.在需要加分布式锁的方法上，添加注解@Klock，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class TestService &#123;</span><br><span class="line"></span><br><span class="line">    @Klock(waitTime = Long.MAX_VALUE)</span><br><span class="line">    public String getValue(String param) throws Exception &#123;</span><br><span class="line">        if (&quot;sleep&quot;.equals(param)) &#123;//线程休眠或者断点阻塞，达到一直占用锁的测试效果</span><br><span class="line">            Thread.sleep(1000 * 50);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使项目拥有分布式锁能力 &lt;a href=&quot;https://github.com/kekingcn/spring-boot-klock-starter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kekingcn/spring-boot-klock-starter&lt;/a&gt;&lt;br&gt;spring-boot-klock-starter&lt;br&gt;基于redis的分布式锁spring-boot starter组件，使得项目拥有分布式锁能力变得异常简单，支持spring boot，和spirng mvc等spring相关项目&lt;br&gt;
    
    </summary>
    
      <category term="分布式锁" scheme="https://ciweigg.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    
      <category term="分布式锁" scheme="https://ciweigg.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>next的自动更新背景图片实现方法及效果图展示</title>
    <link href="https://ciweigg.github.io/2018/01/06/next%E7%9A%84%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%E5%8F%8A%E6%95%88%E6%9E%9C%E5%9B%BE%E5%B1%95%E7%A4%BA/"/>
    <id>https://ciweigg.github.io/2018/01/06/next的自动更新背景图片实现方法及效果图展示/</id>
    <published>2018-01-06T14:29:55.000Z</published>
    <updated>2018-01-06T14:31:24.507Z</updated>
    
    <content type="html"><![CDATA[<p>实现的原理<br>修改背景样式<br>修改themes/next/source/css/ _custom/custom.styl文件，这个是Next故意留给用户自己个性化定制一些样式的文件，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果自己不喜欢这个网址提供的图片做背景，那么修改url()里面的路径即可。repeat、attachment、position就是调整图片的位置，不重复出现、不滚动等等。</p><p>修改不透明度<br>完成这一步其实背景就会自动更换了，但是会出现一个问题，因为next主题的背景是纯透明的，这样子就造成背景图片的影响看不见文字，这对于博客来说肯定不行。</p><p>那么就需要调整背景的不透明度了。同样是修改themes/next/source/css/_custom/custom.styl文件。在后面添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.main-inner &#123; </span><br><span class="line">    margin-top: 60px;</span><br><span class="line">    padding: 60px 60px 60px 60px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    opacity: 0.8;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>background: #fff; 白色 opacity: 0.8;不透明度</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现的原理&lt;br&gt;修改背景样式&lt;br&gt;修改themes/next/source/css/ _custom/custom.styl文件，这个是Next故意留给用户自己个性化定制一些样式的文件，添加以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background:url(https://source.unsplash.com/random/1600x900);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-repeat: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-attachment:fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-position:50% 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>为Hexo-Next主题设置头部图片</title>
    <link href="https://ciweigg.github.io/2018/01/06/%E4%B8%BAHexo-Next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%A4%B4%E9%83%A8%E5%9B%BE%E7%89%87/"/>
    <id>https://ciweigg.github.io/2018/01/06/为Hexo-Next主题设置头部图片/</id>
    <published>2018-01-06T13:56:06.000Z</published>
    <updated>2018-01-06T13:57:34.473Z</updated>
    
    <content type="html"><![CDATA[<p> vi themes/next/source/css/_common/components/header/header.styl<br>// 下面的url()里不一定非要填相对路径，填一个能访问的url即可，比如放在七牛云上的图片<br>.header { background: url(‘../image/background.jpg’); }<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; vi themes/next/source/css/_common/components/header/header.styl&lt;br&gt;// 下面的url()里不一定非要填相对路径，填一个能访问的url即可，比如放在七牛云上的图片&lt;br&gt;.header { background: url(‘../image/background.jpg’); }&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>修改next主题右侧栏的背景图片</title>
    <link href="https://ciweigg.github.io/2018/01/06/%E4%BF%AE%E6%94%B9next%E4%B8%BB%E9%A2%98%E5%8F%B3%E4%BE%A7%E6%A0%8F%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>https://ciweigg.github.io/2018/01/06/修改next主题右侧栏的背景图片/</id>
    <published>2018-01-06T11:37:31.000Z</published>
    <updated>2018-01-06T11:41:47.413Z</updated>
    
    <content type="html"><![CDATA[<p>右侧栏都是黑色的看腻了啦<br>那么我们就换一套风格看看，哈哈<br><a id="more"></a></p><h3 id="修改背景图片"><a href="#修改背景图片" class="headerlink" title="修改背景图片"></a>修改背景图片</h3><p>vi themes/next/source/css/_custom/custom.styl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#sidebar &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    width: 0;</span><br><span class="line">    z-index: 1040;</span><br><span class="line">    box-shadow: inset 2px 2px 40px #35644a;</span><br><span class="line">    background: #f5f5f5;</span><br><span class="line">    background: url(http://oisa91ton.bkt.clouddn.com/sidebar.png);</span><br><span class="line">    -webkit-transform: translateZ(0);</span><br><span class="line">&#125;</span><br><span class="line">.site-author-name &#123;</span><br><span class="line">    margin: 5px 0 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #35644a;</span><br><span class="line">    font-weight: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改a链接的字体颜色"><a href="#修改a链接的字体颜色" class="headerlink" title="修改a链接的字体颜色"></a>修改a链接的字体颜色</h3><p>注释掉以前的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  // color: $grey-dark;</span><br><span class="line">  color: #63b1b5;</span><br><span class="line">  border-bottom-color: $black-light;</span><br><span class="line">  &amp;:hover &#123; color: $gainsboro; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;右侧栏都是黑色的看腻了啦&lt;br&gt;那么我们就换一套风格看看，哈哈&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>开源微信支付SDK-分分钟解决支付</title>
    <link href="https://ciweigg.github.io/2018/01/06/%E5%BC%80%E6%BA%90%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98SDK-%E5%88%86%E5%88%86%E9%92%9F%E8%A7%A3%E5%86%B3%E6%94%AF%E4%BB%98/"/>
    <id>https://ciweigg.github.io/2018/01/06/开源微信支付SDK-分分钟解决支付/</id>
    <published>2018-01-06T02:45:04.000Z</published>
    <updated>2018-01-06T04:08:38.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>让使用微信支付的朋友最快速度接入微信支付.</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>两行代码解决微信支付提供的各种服务, 开箱即用, 可扩展性超强(只需根据服务的上下行协议定义协议类后, 放入工厂即可获取调用结果).<br><a id="more"></a></p><h3 id="最新发布"><a href="#最新发布" class="headerlink" title="最新发布"></a>最新发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.arccode&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wechat-pay-sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="http://oisa91ton.bkt.clouddn.com/wx-pay-sdk.jpg" alt=""></p><h3 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h3><blockquote><p>源码地址 <a href="https://github.com/arccode/wechat-pay-sdk" target="_blank" rel="noopener">https://github.com/arccode/wechat-pay-sdk</a></p></blockquote><h3 id="目前支持的服务及调用示例"><a href="#目前支持的服务及调用示例" class="headerlink" title="目前支持的服务及调用示例"></a>目前支持的服务及调用示例</h3><p>所有服务在单元测试类(WXPayClientTest.java)中均已测试通过, 下行参数response.isSuccess == true表示服务调用成功.</p><h3 id="支付举例"><a href="#支付举例" class="headerlink" title="支付举例"></a>支付举例</h3><h4 id="扫码支付"><a href="#扫码支付" class="headerlink" title="扫码支付"></a>扫码支付</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String nonceStr = SDKUtils.genRandomStringByLength(32);</span><br><span class="line">UnifiedOrderRequest request = new UnifiedOrderRequest(&quot;donate-899&quot;,SDKUtils.genOutTradeNo(),1, &quot;192.168.1.1&quot;, asyncNotifyUrl, &quot;NATIVE&quot;, nonceStr);</span><br><span class="line">UnifiedOrderResponse response = wxPayClient.execute(request);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h3 id="初始化-sdk"><a href="#初始化-sdk" class="headerlink" title="初始化 sdk"></a>初始化 sdk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private WXPayClient wxPayClient;</span><br><span class="line"></span><br><span class="line">    private WXPayClient wxPayVIPClient;</span><br><span class="line"></span><br><span class="line">    private String asyncNotifyUrl = &quot;http://domain:port/path&quot;;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line"></span><br><span class="line">        // 以下配置参数根据公司申请的微信支付帐号填写</span><br><span class="line">        String appId = &quot;&quot;;</span><br><span class="line">        String mchId = &quot;&quot;;</span><br><span class="line">        String key = &quot;&quot;;</span><br><span class="line">        String certPwd = &quot;&quot;;</span><br><span class="line">        // 绝对路径, 用于退款和商户支付</span><br><span class="line">        String certPath = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        wxPayClient = new WXPayClient(appId, mchId, key);</span><br><span class="line">        wxPayVIPClient = new WXPayClient(appId, mchId, key, certPwd, certPath);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="公众号支付"><a href="#公众号支付" class="headerlink" title="公众号支付"></a>公众号支付</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String nonceStr = SDKUtils.genRandomStringByLength(32);</span><br><span class="line">UnifiedOrderRequest request = new UnifiedOrderRequest(&quot;donate-899&quot;,SDKUtils.genOutTradeNo(),</span><br><span class="line">                1, &quot;192.168.1.1&quot;, asyncNotifyUrl, &quot;JSAPI&quot;, nonceStr);</span><br><span class="line">request.setOpenId(&quot;oKVmeuHht8J0Ni58CSNe474AHA3E&quot;);</span><br><span class="line">UnifiedOrderResponse response = wxPayClient.execute(request);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h4 id="APP支付"><a href="#APP支付" class="headerlink" title="APP支付"></a>APP支付</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String nonceStr = SDKUtils.genRandomStringByLength(32);</span><br><span class="line">UnifiedOrderRequest request = new UnifiedOrderRequest(&quot;donate-899&quot;,SDKUtils.genOutTradeNo(),</span><br><span class="line">                1, &quot;192.168.1.1&quot;, asyncNotifyUrl, &quot;APP&quot;, nonceStr);</span><br><span class="line">UnifiedOrderResponse response = wxPayClient.execute(request);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h4 id="商家支付"><a href="#商家支付" class="headerlink" title="商家支付"></a>商家支付</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=14_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=14_2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String nonceStr = SDKUtils.genRandomStringByLength(32);</span><br><span class="line">String customerOpenId = &quot;oKVmeuHht8J0Ni58CSNe474AHA3E&quot;;</span><br><span class="line">MchPayRequest mchPayRequest = new MchPayRequest(SDKUtils.genOutTradeNo(),</span><br><span class="line">                customerOpenId, &quot;NO_CHECK&quot;, 100, &quot;xxxx年xx月结算&quot;, &quot;192.168.1.1&quot;, nonceStr);</span><br><span class="line">MchPayResponse response = wxPayVIPClient.execute(mchPayRequest);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h4 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_4&amp;index=6" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_4&amp;index=6</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String nonceStr = SDKUtils.genRandomStringByLength(32);</span><br><span class="line">RefundRequest request = new RefundRequest(&quot;T15121416014891124211768&quot;,</span><br><span class="line">                SDKUtils.genOutRefundNo(), 1, 1, &quot;112102020&quot;, nonceStr);</span><br><span class="line">RefundResponse response = wxPayVIPClient.execute(request);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h4 id="支付异步通知解析"><a href="#支付异步通知解析" class="headerlink" title="支付异步通知解析"></a>支付异步通知解析</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String notifyTxt = &quot;&lt;xml&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;appid&gt;&lt;![CDATA[wx2421b1c4370eccdcd]]&gt;&lt;/appid&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;attach&gt;&lt;![CDATA[支付测试]]&gt;&lt;/attach&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;bank_type&gt;&lt;![CDATA[CFT]]&gt;&lt;/bank_type&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;fee_type&gt;&lt;![CDATA[CNY]]&gt;&lt;/fee_type&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;is_subscribe&gt;&lt;![CDATA[Y]]&gt;&lt;/is_subscribe&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;mch_id&gt;&lt;![CDATA[10000100]]&gt;&lt;/mch_id&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;nonce_str&gt;&lt;![CDATA[5d2b6c2a8db53831f7eda20af46e531c]]&gt;&lt;/nonce_str&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;openid&gt;&lt;![CDATA[oUpF8uMEb4qRXf22hE3X68TekukE]]&gt;&lt;/openid&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;out_trade_no&gt;&lt;![CDATA[1409811653]]&gt;&lt;/out_trade_no&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;result_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/result_code&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;sign&gt;&lt;![CDATA[B552ED6B279343CB493C5DD0D78AB241]]&gt;&lt;/sign&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;sub_mch_id&gt;&lt;![CDATA[10000100]]&gt;&lt;/sub_mch_id&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;time_end&gt;&lt;![CDATA[20140903131540]]&gt;&lt;/time_end&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;total_fee&gt;1&lt;/total_fee&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;trade_type&gt;&lt;![CDATA[JSAPI]]&gt;&lt;/trade_type&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;transaction_id&gt;&lt;![CDATA[1004400740201409030005092168]]&gt;&lt;/transaction_id&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/xml&gt;&quot;;</span><br><span class="line">PayNotifyResponse response = wxPayClient.parseNotify(notifyTxt, PayNotifyResponse.class);</span><br><span class="line">Assert.assertNotNull(response);</span><br><span class="line">LOG.info(JSON.toJSONString(response));</span><br><span class="line">// TODO 开发人员根据 response中的属性值处理业务逻辑, 此处可完美嵌入业务层(小型系统)或服务层(大型系统)</span><br></pre></td></tr></table></figure><h4 id="刷卡支付"><a href="#刷卡支付" class="headerlink" title="刷卡支付"></a>刷卡支付</h4><p>官方文档详见: <a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_10&amp;index=1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_10&amp;index=1</a></p><p>目前未使用, 待续……</p><p>扩展<br>该SDK设计了一个服务工厂, 该工厂中包含HTTP执行器/返回数据解析方式(json/xml)/入参数据格式(json/xml)构造等, 开发人员需要增加服务仅需要根据服务协议文档编写上下行协议, 并在协议中指明API接口和返回数据类型, 再将上行协议放入工厂中执行即可; 可参考已完成的服务协议进行扩展编写.</p><p>本文出处: <a href="http://www.arccode.net/wechat-pay-sdk-out-of-the-box.html" target="_blank" rel="noopener">http://www.arccode.net/wechat-pay-sdk-out-of-the-box.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;让使用微信支付的朋友最快速度接入微信支付.&lt;/p&gt;
&lt;h3 id=&quot;核心&quot;&gt;&lt;a href=&quot;#核心&quot; class=&quot;headerlink&quot; title=&quot;核心&quot;&gt;&lt;/a&gt;核心&lt;/h3&gt;&lt;p&gt;两行代码解决微信支付提供的各种服务, 开箱即用, 可扩展性超强(只需根据服务的上下行协议定义协议类后, 放入工厂即可获取调用结果).&lt;br&gt;
    
    </summary>
    
      <category term="微信支付" scheme="https://ciweigg.github.io/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="微信支付" scheme="https://ciweigg.github.io/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Next主题小屏幕下保留侧边栏</title>
    <link href="https://ciweigg.github.io/2018/01/05/Next%E4%B8%BB%E9%A2%98%E5%B0%8F%E5%B1%8F%E5%B9%95%E4%B8%8B%E4%BF%9D%E7%95%99%E4%BE%A7%E8%BE%B9%E6%A0%8F/"/>
    <id>https://ciweigg.github.io/2018/01/05/Next主题小屏幕下保留侧边栏/</id>
    <published>2018-01-05T14:03:49.000Z</published>
    <updated>2018-01-06T05:38:35.235Z</updated>
    
    <content type="html"><![CDATA[<p>当然，iissnan最初决定在小屏幕上block掉侧栏是有原因的，这个副作用在这番改动之后也依然存在：极端尺寸设备上会出现侧栏完全覆盖主体甚至显示不全。改动的好处也很明显，页面内容展示更完全。毕竟H5普及之后，小型网站越来越不需要考虑兼容性问题，权衡利弊，这样做还是有意义的。<br><a id="more"></a><br>恢复侧栏开关(适用于手机)</p><p>这一步参考上面提到的那篇教程。</p><h3 id="启用侧边栏有两种方法："><a href="#启用侧边栏有两种方法：" class="headerlink" title="启用侧边栏有两种方法："></a>启用侧边栏有两种方法：</h3><h4 id="1-针对next主题："><a href="#1-针对next主题：" class="headerlink" title="1.针对next主题："></a>1.针对next主题：</h4><p>默认已经实现了，改成true就行<br>themes/next/_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">onmobile: true</span><br></pre></td></tr></table></figure></p><h4 id="2-针对其他主题"><a href="#2-针对其他主题" class="headerlink" title="2.针对其他主题"></a>2.针对其他主题</h4><p>打开source/css/_common/components/sidebar/sidebar.styl，删掉或注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*+tablet() &#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">&#125;</span><br><span class="line">+mobile() &#123;</span><br><span class="line">  display: none !important;</span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure><p>启用按钮<br>首先是侧边栏开关，打开source/css/_common/components/sidebar/sidebar-toggle.styl，在.sidebar-toggle下修改</p><p>注释掉里面多余的代码留下和下面一样的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+tablet() &#123;</span><br><span class="line">  right: 20px;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">+mobile() &#123;</span><br><span class="line">  right: 20px;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里在解除隐藏的同时微调了显示效果。<br>然后是back-to-top按钮，类似的，打开source/css/_common/components/back-to-top.styl，在.back-to-top下修改</p><p>注释掉里面多余的代码留下和下面一样的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+tablet() &#123;</span><br><span class="line">  right: 20px;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">+mobile() &#123;</span><br><span class="line">  right: 20px;</span><br><span class="line">  opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里已经实现了目标，但触摸屏上关闭侧边栏最方便的还是点击外围区域或者滑动，这里选择前一种实现方式。</p><p>增加关闭侧栏的方式<br>策略很简单，增加一个覆盖层与侧栏联动，点击覆盖层触发侧栏开关按钮的点击事件。首先修改layout/_macro/sidebar.swig，增加sidebar-dimmer层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside id=&quot;sidebar&quot; class=&quot;sidebar&quot;&gt;</span><br><span class="line">  + &lt;div id=&quot;sidebar-dimmer&quot;&gt;&lt;/div&gt;</span><br><span class="line">  + &lt;div class=&quot;sidebar-inner&quot;&gt;</span><br></pre></td></tr></table></figure><p>定义sidebar-dimmer的样式，这里我把代码放在source/css/_common/components/sidebar/sidebar-toggle.styl中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.sidebar-active #sidebar-dimmer &#123;</span><br><span class="line">  opacity: .7;</span><br><span class="line">  -webkit-transform: translateX(-150%);</span><br><span class="line">  transform: translateX(-150%);</span><br><span class="line">  transition: opacity .2s;</span><br><span class="line">&#125;</span><br><span class="line">#sidebar-dimmer &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 100%;</span><br><span class="line">  width: 200%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background: #000;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transition: opacity .2s,transform 0s .2s;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dimmer宽度倍率x和左移倍率y需要满足y=1+1/x的关系才能在侧栏展开时与dimmer右边界形成良好的衔接，所以需要根据mobile view最大宽度调整x的值。这里图省事把x设定为200%，y自然是150%了。<br>最后添加触发条件，修改source/js/src/motion.js<br>对比代码是否一样就行了，可能主题里添加过了</p><pre><code>var sidebarToggleMotion = {  toggleEl: $(&apos;.sidebar-toggle&apos;),  dimmerEl: $(&apos;#sidebar-dimmer&apos;),  //init  sidebarEl: $(&apos;.sidebar&apos;),  isSidebarVisible: false,  init: function () {    this.toggleEl.on(&apos;click&apos;, this.clickHandler.bind(this));    this.dimmerEl.on(&apos;click&apos;, this.clickHandler.bind(this));   //binding    this.toggleEl.on(&apos;mouseenter&apos;, this.mouseEnterHandler.bind(this));    this.toggleEl.on(&apos;mouseleave&apos;, this.mouseLeaveHandler.bind(this));</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然，iissnan最初决定在小屏幕上block掉侧栏是有原因的，这个副作用在这番改动之后也依然存在：极端尺寸设备上会出现侧栏完全覆盖主体甚至显示不全。改动的好处也很明显，页面内容展示更完全。毕竟H5普及之后，小型网站越来越不需要考虑兼容性问题，权衡利弊，这样做还是有意义的。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>安装免费https</title>
    <link href="https://ciweigg.github.io/2018/01/05/%E5%AE%89%E8%A3%85%E5%85%8D%E8%B4%B9https/"/>
    <id>https://ciweigg.github.io/2018/01/05/安装免费https/</id>
    <published>2018-01-05T07:52:17.000Z</published>
    <updated>2018-01-05T08:00:25.183Z</updated>
    
    <content type="html"><![CDATA[<p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书. <a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh</a><br>给acme.sh组织赞助：Acknowledgments<br><a id="more"></a><br>很简单就两个步骤:</p><h3 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 acme.sh</h3><p>curl  <a href="https://get.acme.sh" target="_blank" rel="noopener">https://get.acme.sh</a> | sh<br>这条命令，会做的事情<br>1.把 acme.sh 安装到你的 home 目录下： 并创建 一个 bash 的 alias, 方便你的使用: acme.sh=~/.acme.sh/acme.sh<br>2.自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p><h3 id="2-生成证书，及验证证书"><a href="#2-生成证书，及验证证书" class="headerlink" title="2. 生成证书，及验证证书"></a>2. 生成证书，及验证证书</h3><p>如果你还没有运行任何 web 服务, 且80 端口是空闲的, 那么 acme.sh 能假装自己是一个webserver, 临时听在80 端口, 完成验证:<br>注意：如果您使用的时候，请把，hub.ymq.io 替换成自己域名，此域名需要dns 解析到安装私有仓库的服务器IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.acme.sh/</span><br><span class="line">$ apt-get install socat</span><br><span class="line">$ sh acme.sh  --issue -d hub.ymq.io   --standalone</span><br></pre></td></tr></table></figure></p><p>如果看到如下信息，说明证书验证并生成成功,证书生成位置在：/root/.acme.sh/hub.ymq.io/ 下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Success</span><br><span class="line">Verify finished, start to sign.</span><br><span class="line">Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">[Wed Jan  3 14:36:25 UTC 2018] Standalone mode.</span><br><span class="line">[Wed Jan  3 14:36:25 UTC 2018] Registering account</span><br><span class="line">[Wed Jan  3 14:36:27 UTC 2018] Registered</span><br><span class="line">[Wed Jan  3 14:36:27 UTC 2018] ACCOUNT_THUMBPRINT=&apos;7TpUIE5N--hq2nhk2ruKmHBfgKB-LX-pBCkWzzmHzVM&apos;</span><br><span class="line">[Wed Jan  3 14:36:27 UTC 2018] Creating domain key</span><br><span class="line">[Wed Jan  3 14:36:28 UTC 2018] The domain key is here: /root/.acme.sh/hub.ymq.io/hub.ymq.io.key</span><br><span class="line">[Wed Jan  3 14:36:28 UTC 2018] Single domain=&apos;hub.ymq.io&apos;</span><br><span class="line">[Wed Jan  3 14:36:28 UTC 2018] Getting domain auth token for each domain</span><br><span class="line">[Wed Jan  3 14:36:28 UTC 2018] Getting webroot for domain=&apos;hub.ymq.io&apos;</span><br><span class="line">[Wed Jan  3 14:36:28 UTC 2018] Getting new-authz for domain=&apos;hub.ymq.io&apos;</span><br><span class="line">[Wed Jan  3 14:36:29 UTC 2018] The new-authz request is ok.</span><br><span class="line">[Wed Jan  3 14:36:29 UTC 2018] Verifying:hub.ymq.io</span><br><span class="line">[Wed Jan  3 14:36:29 UTC 2018] Standalone mode server</span><br><span class="line">[Wed Jan  3 14:36:34 UTC 2018] Success</span><br><span class="line">[Wed Jan  3 14:36:34 UTC 2018] Verify finished, start to sign.</span><br><span class="line">[Wed Jan  3 14:36:35 UTC 2018] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIE9zCCA9+gAwIBAgISA6WV4ZFi6lr/kngVGx7/FoPMMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">******************************************</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Wed Jan  3 14:36:35 UTC 2018] Your cert is in  /root/.acme.sh/hub.ymq.io/hub.ymq.io.cer </span><br><span class="line">[Wed Jan  3 14:36:35 UTC 2018] Your cert key is in  /root/.acme.sh/hub.ymq.io/hub.ymq.io.key </span><br><span class="line">[Wed Jan  3 14:36:35 UTC 2018] The intermediate CA cert is in  /root/.acme.sh/hub.ymq.io/ca.cer </span><br><span class="line">[Wed Jan  3 14:36:35 UTC 2018] And the full chain certs is there:  /root/.acme.sh/hub.ymq.io/fullchain.cer</span><br></pre></td></tr></table></figure></p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>安装nginx自行百度<br>cd conf.d/<br>touch ssl.conf<br>vi ssl.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server&#123;  </span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80 ssl ipv6only=on; </span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    listen [::]:443 ssl ipv6only=on;</span><br><span class="line">    server_name 123.206.103.20;</span><br><span class="line">    access_log  /var/log/nginx/melog.log  main;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/ssl/private/example_com.crt;</span><br><span class="line">    ssl_certificate_key /etc/ssl/private/example_com.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>systemctl restart nginx</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书. &lt;a href=&quot;https://github.com/Neilpang/acme.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Neilpang/acme.sh&lt;/a&gt;&lt;br&gt;给acme.sh组织赞助：Acknowledgments&lt;br&gt;
    
    </summary>
    
      <category term="https" scheme="https://ciweigg.github.io/categories/https/"/>
    
    
      <category term="https" scheme="https://ciweigg.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中使用Flyway来初始化数据库并控制版本</title>
    <link href="https://ciweigg.github.io/2018/01/04/Spring%20Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Flyway%E6%9D%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E6%8E%A7%E5%88%B6%E7%89%88%E6%9C%AC/"/>
    <id>https://ciweigg.github.io/2018/01/04/Spring Boot中使用Flyway来初始化数据库并控制版本/</id>
    <published>2018-01-03T21:19:06.885Z</published>
    <updated>2018-01-04T05:40:35.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flyway简介"><a href="#Flyway简介" class="headerlink" title="Flyway简介"></a>Flyway简介</h3><p>Flyway是一个简单开源数据库版本控制器（约定大于配置），主要提供migrate、clean、info、validate、baseline、repair等命令。它支持SQL（PL/SQL、T-SQL）方式和Java方式，支持命令行客户端等，还提供一系列的插件支持（Maven、Gradle、SBT、ANT等）。<br>官方网站：<a href="https://flywaydb.org/" target="_blank" rel="noopener">https://flywaydb.org/</a><br>在Spring Boot应用中的应用，如何使用Flyway来创建数据库以及结构不一致的检查。<br>主要用于初始化数据库，数据库必须先创建好，里面不能有表<br><a id="more"></a></p><ol><li><p>第一步，在pom.xml中增加flyway的依赖<br>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>第二步，按Flyway的规范创建版本化的SQL脚本<br>在工程的src/main/resources目录下创建db目录<br>在db目录下创建版本化的SQL脚本V1__Base_version.sql(脚本名字不能随便乱起)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user ;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</span><br><span class="line">  `name` varchar(20) NOT NULL COMMENT &apos;姓名&apos;,</span><br><span class="line">  `age` int(5) DEFAULT NULL COMMENT &apos;年龄&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure></li><li><p>第三步，在application.properties文件中配置Flyway要加载的SQL脚本位置。按第二步创建的结果配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flyway.locations=classpath:/db</span><br></pre></td></tr></table></figure></li><li><p>第四步，执行单元测试ApplicationTests，此时我们在日志中可以看到如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO 82441 --- [main] o.f.core.internal.util.VersionPrinter    : Flyway Community Edition 5.0.3 by Boxfuse</span><br><span class="line">INFO 82441 --- [main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://localhost:3306/test (MySQL 5.7)</span><br><span class="line">INFO 82441 --- [main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.022s)</span><br><span class="line">INFO 82441 --- [main] o.f.c.i.s.JdbcTableSchemaHistory         : Creating Schema History table: `test`.`flyway_schema_history`</span><br><span class="line">INFO 82441 --- [main] o.f.core.internal.command.DbMigrate      : Current version of schema `test`: &lt;&lt; Empty Schema &gt;&gt;</span><br><span class="line">INFO 82441 --- [main] o.f.core.internal.command.DbMigrate      : Migrating schema `test` to version 1 - Base version</span><br><span class="line">WARN 82441 --- [main] o.f.core.internal.sqlscript.SqlScript    : DB: Unknown table &apos;test.user&apos; (SQL State: 42S02 - Error Code: 1051)</span><br><span class="line">INFO 82441 --- [main] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema `test` (execution time 00:00.128s)</span><br></pre></td></tr></table></figure></li></ol><p>Flyway监测到需要运行版本脚本来初始化数据库，因此执行了V1__Base_version.sql脚本，从而创建了user表，这才得以让一系列单元测试（对user表的CRUD操作）通过。</p><ol><li>第五步，我们可以继续再执行一下单元测试，此时我们会发现日志输出与之前不同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO 83150 --- [main] o.f.core.internal.util.VersionPrinter    : Flyway Community Edition 5.0.3 by Boxfuse</span><br><span class="line">INFO 83150 --- [main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:mysql://localhost:3306/test (MySQL 5.7)</span><br><span class="line">INFO 83150 --- [main] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.031s)</span><br><span class="line">INFO 83150 --- [main] o.f.core.internal.command.DbMigrate      : Current version of schema `test`: 1</span><br><span class="line">INFO 83150 --- [main] o.f.core.internal.command.DbMigrate      : Schema `test` is up to date. No migration necessary.</span><br></pre></td></tr></table></figure></li></ol><p>由于在第四步的时候，初始化脚本已经执行过，所以这次执行就没有再去执行V1__Base_version.sql脚本来重建user表。</p><ol><li>第六步，我们可以尝试修改一下V1__Base_version.sql脚本中的name字段长度，然后在运行一下单元测试，此时我们可以得到如下错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR 83791 --- [main] o.s.boot.SpringApplication               : Application startup failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;flywayInitializer&apos; defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version 1</span><br><span class="line">-&gt; Applied to database : 466264992</span><br><span class="line">-&gt; Resolved locally    : -270269434</span><br></pre></td></tr></table></figure></li></ol><p>由于初始化脚本的改动，Flyway校验失败，认为当前的V1__Base_version.sql脚本与上一次执行的内容不同，提示报错并终止程序，以免造成更严重的数据结构破坏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Flyway简介&quot;&gt;&lt;a href=&quot;#Flyway简介&quot; class=&quot;headerlink&quot; title=&quot;Flyway简介&quot;&gt;&lt;/a&gt;Flyway简介&lt;/h3&gt;&lt;p&gt;Flyway是一个简单开源数据库版本控制器（约定大于配置），主要提供migrate、clean、info、validate、baseline、repair等命令。它支持SQL（PL/SQL、T-SQL）方式和Java方式，支持命令行客户端等，还提供一系列的插件支持（Maven、Gradle、SBT、ANT等）。&lt;br&gt;官方网站：&lt;a href=&quot;https://flywaydb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://flywaydb.org/&lt;/a&gt;&lt;br&gt;在Spring Boot应用中的应用，如何使用Flyway来创建数据库以及结构不一致的检查。&lt;br&gt;主要用于初始化数据库，数据库必须先创建好，里面不能有表&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://ciweigg.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://ciweigg.github.io/tags/SpringBoot/"/>
    
      <category term="Flyway" scheme="https://ciweigg.github.io/tags/Flyway/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题添加photoswipe类型相册</title>
    <link href="https://ciweigg.github.io/2018/01/02/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0photoswipe%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%86%8C/"/>
    <id>https://ciweigg.github.io/2018/01/02/hexo-next主题添加photoswipe类型相册/</id>
    <published>2018-01-02T09:12:00.000Z</published>
    <updated>2018-01-03T14:04:29.709Z</updated>
    
    <content type="html"><![CDATA[<p>next主题一定是要我github的next主题<br>每个精彩的镜头，需要用照片来描绘，所以这个主题有照片功能啦<br><a id="more"></a><br>其实就是github上搜索hexo-theme-next这个人的next主题<br><img src="http://oisa91ton.bkt.clouddn.com/1514884431453sqwkgwdz.png?imageslim" alt="paste image"></p><p>首先下载我的博客备份：<br>shell文件夹中的tool.py就是我们需要的生成照片脚本了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行：python tool.py</span><br><span class="line">照片格式：2017-01-02_名称.jpg</span><br><span class="line">上传照片存储在脚本的photos</span><br><span class="line">会生成缩略图存储在min_photos</span><br></pre></td></tr></table></figure></p><p>他会将生成的照片放在/blog/source/photos/文件中data.json<br>那么当然了photos文件夹中的文件也就是照片需要的page页面了<br>修改成自己的github备份仓库能访问到图片的地址就行：<br>文件位置(blog根目录)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog/source/photos/ins.js</span><br></pre></td></tr></table></figure></p><p><img src="http://oisa91ton.bkt.clouddn.com/1514884819115xldu0nf6.png?imageslim" alt="paste image"></p><p>hexo g<br>hexo s<br>访问photos就能看到相册了，菜单配置就不说了<br><img src="http://oisa91ton.bkt.clouddn.com/151488514435550agul4q.png?imageslim" alt="paste image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;next主题一定是要我github的next主题&lt;br&gt;每个精彩的镜头，需要用照片来描绘，所以这个主题有照片功能啦&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题特殊功能</title>
    <link href="https://ciweigg.github.io/2018/01/01/hexo-next%E4%B8%BB%E9%A2%98%E7%89%B9%E6%AE%8A%E5%B0%81%E9%9D%A2/"/>
    <id>https://ciweigg.github.io/2018/01/01/hexo-next主题特殊封面/</id>
    <published>2018-01-01T10:29:00.000Z</published>
    <updated>2018-01-01T10:35:14.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-画廊效果"><a href="#1-画廊效果" class="headerlink" title="1.画廊效果"></a>1.画廊效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layout: photo</span><br><span class="line">title: 画廊</span><br><span class="line">date: 2017-01-16 02:03:32</span><br><span class="line">tags: hexo</span><br><span class="line">photos:</span><br><span class="line"> - http://xxx.jpg</span><br><span class="line"> - http://xxx.jpg</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-标签图片"><a href="#2-标签图片" class="headerlink" title="2.标签图片"></a>2.标签图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">title: 标签图片</span><br><span class="line">categories:</span><br><span class="line">  - picture</span><br><span class="line">tags:</span><br><span class="line">  - picture</span><br><span class="line">type: picture</span><br><span class="line">date: 2017-07-30 14:32:00</span><br><span class="line">---</span><br><span class="line">动漫图片：</span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![](http://oisa91ton.bkt.clouddn.com/2017-08-01_chinajoy1.jpg)</span><br><span class="line">![](http://oisa91ton.bkt.clouddn.com/2017-08-01_chinajoy2.jpg)</span><br><span class="line">![](http://oisa91ton.bkt.clouddn.com/2017-08-01_chinajoy3.jpg)</span><br><span class="line">![](http://oisa91ton.bkt.clouddn.com/2017-08-01_chinajoy4.jpg)</span><br><span class="line">![](http://oisa91ton.bkt.clouddn.com/2017-08-01_chinajoy5.jpg)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-画廊效果&quot;&gt;&lt;a href=&quot;#1-画廊效果&quot; class=&quot;headerlink&quot; title=&quot;1.画廊效果&quot;&gt;&lt;/a&gt;1.画廊效果&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;layout: photo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 画廊&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2017-01-16 02:03:32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags: hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;photos:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - http://xxx.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - http://xxx.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题添加相册</title>
    <link href="https://ciweigg.github.io/2018/01/01/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/"/>
    <id>https://ciweigg.github.io/2018/01/01/hexo-next主题添加相册/</id>
    <published>2018-01-01T07:49:00.000Z</published>
    <updated>2018-01-01T08:58:12.945Z</updated>
    
    <content type="html"><![CDATA[<p>我研究了好几天才做完这个东西的，哎还去了解了JS，对我这个后台来说前台真是好难呀<br>转载请注明出处<br><img src="http://oisa91ton.bkt.clouddn.com/1514793010805lknaui0q.png?imageslim" alt="paste image"><br><a id="more"></a><br>言归正传：</p><h3 id="1-hexo创建一个photo的page"><a href="#1-hexo创建一个photo的page" class="headerlink" title="1.hexo创建一个photo的page"></a>1.hexo创建一个photo的page</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page photo</span><br></pre></td></tr></table></figure><h3 id="2-需要一个生成json的脚本："><a href="#2-需要一个生成json的脚本：" class="headerlink" title="2.需要一个生成json的脚本："></a>2.需要一个生成json的脚本：</h3><p>photo-tool.js<br>./photos/ 是当前目录下的文件夹，里面存放照片的哦（照片格式2018-01-01_照片.jpg）<br>../source/photo/data.json 是生成的json文件存放位置<br>photo-tool.js脚本和photos文件夹放在一起就行了 可以放在hexo根目录<br>src替换成自己存放照片的github路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var path = &quot;./photos/&quot;;</span><br><span class="line">fs.readdir(path, function (err, files) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var arr = [];</span><br><span class="line">    var arrs =[];</span><br><span class="line">  var a = &#123;</span><br><span class="line">    &apos;info&apos; : []</span><br><span class="line">  &#125;;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    (function iterator(index) &#123;</span><br><span class="line">        if (index == files.length) &#123;</span><br><span class="line">            fs.writeFile(&quot;../source/photo/data.json&quot;, JSON.stringify(a, null, &quot;\t&quot;));</span><br><span class="line">            console.log(&apos;get img success!&apos;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fs.stat(path + files[index], function (err, stats) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (stats.isFile()) &#123;</span><br><span class="line">                arrs=files[index].split(&quot;_&quot;);</span><br><span class="line">                var ym =[];</span><br><span class="line">                ym = arrs[0].split(&quot;-&quot;);</span><br><span class="line">                var y = ym[0];</span><br><span class="line">                var m = ym[1];</span><br><span class="line">                var texts =[];</span><br><span class="line">                texts = arrs[1].split(&quot;.&quot;);</span><br><span class="line">                var text = texts[0];</span><br><span class="line">                a.info.push(&#123;&quot;src&quot;:&quot;https://raw.githubusercontent.com/ciweigg/blog-back-up/master/shell/photos/&quot;+files[index] ,&quot;y&quot;:y ,&quot;m&quot;:m ,&quot;text&quot;:text&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            iterator(index + 1);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;(0));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>执行脚本node photo-tool.js</p></blockquote><h3 id="3-在github需要创建一个照片备份的仓库"><a href="#3-在github需要创建一个照片备份的仓库" class="headerlink" title="3.在github需要创建一个照片备份的仓库"></a>3.在github需要创建一个照片备份的仓库</h3><p>当然不一定要放在github，七牛云啊什么的都可以的<br>照片使用hexo b 上传，或者直接手动上传github仓库就行</p><h3 id="4-创建个获取相册的album-js"><a href="#4-创建个获取相册的album-js" class="headerlink" title="4.创建个获取相册的album.js"></a>4.创建个获取相册的album.js</h3><p>我使用的是next主题，所有js都放在这个目录下面：<br>cat themes/nextOne/source/js/src/album.js<br>编辑album.js<br>只需要修改此处就行了：url:’/photo/data.json’<br>/photo/data.json 相对路径=hexo根目录source下面的，就是上面所生成的page目录下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">function getList()&#123;</span><br><span class="line">           var imgData=getImgData();</span><br><span class="line">                ctrler(imgData);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function changeSize()&#123;</span><br><span class="line">   if($(document).width() &lt;= 600)&#123;</span><br><span class="line">                $(&quot;.img-box&quot;).css(&#123;&quot;width&quot;:&quot;auto&quot;, &quot;height&quot;:&quot;auto&quot;&#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">                //根据设配宽度处理图片显示尺寸</span><br><span class="line">                var width = $(&quot;.img-box-ul&quot;).width();</span><br><span class="line">                var size = Math.max(width*0.28, 155);   </span><br><span class="line">                $(&quot;.img-box&quot;).width(size).height(size);</span><br><span class="line">        &#125;</span><br><span class="line">        $(&apos;.instagram img&apos;).each(function() &#123;</span><br><span class="line">                $(this).css(&quot;height&quot;, size);</span><br><span class="line">                $(this).css(&quot;width&quot;, size);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function bind()&#123;</span><br><span class="line">        $(window).resize(function()&#123;</span><br><span class="line">                changeSize();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function ctrler(data)&#123;</span><br><span class="line">   var imgObj = &#123;&#125;;</span><br><span class="line">        for(var i=0,len=data.length;i&lt;len;i++)&#123;</span><br><span class="line">                var y = data[i].y;</span><br><span class="line">                var m = data[i].m;</span><br><span class="line">                var src = data[i].src;</span><br><span class="line">                var text = data[i].text;</span><br><span class="line">                var key = y+&quot;&quot;+((m+&quot;&quot;).length == 1?&quot;0&quot;+m : m);</span><br><span class="line">                if(imgObj[key])&#123;</span><br><span class="line">                        imgObj[key].srclist.push(src);</span><br><span class="line">                        imgObj[key].text.push(text);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                        imgObj[key] = &#123;</span><br><span class="line">                                year:y,</span><br><span class="line">                                month:m,</span><br><span class="line">                                srclist:[src],</span><br><span class="line">                                text:[text]</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        render(imgObj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getImgData()&#123;</span><br><span class="line">   var content;</span><br><span class="line">        $.ajax(&#123;  </span><br><span class="line">        url:&apos;/photo/data.json&apos;,  </span><br><span class="line">        async:false,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">                content=data;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;); </span><br><span class="line">    content=eval(content)</span><br><span class="line">    content=content.info</span><br><span class="line">        return content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function render(data)&#123;</span><br><span class="line">   var ulTmpl = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        for(var em in data)&#123;</span><br><span class="line">                var liTmpl = &quot;&quot;;</span><br><span class="line">                for(var i=0,len=data[em].srclist.length;i&lt;len;i++)&#123;</span><br><span class="line">                        liTmpl += &apos;&lt;li&gt;\</span><br><span class="line">                                                        &lt;div class=&quot;img-box&quot;&gt;\</span><br><span class="line">                                                                &lt;a class=&quot;img-bg&quot; rel=&quot;example_group&quot; href=&quot;&apos;+data[em].srclist[i]+&apos;&quot; title=&quot;&apos;+data[em].text[i]+&apos;&quot;&gt;&lt;/a&gt;\</span><br><span class="line">                                                                &lt;img  class=&quot;lazy&quot;  src=&quot;&apos;+data[em].srclist[i]+&apos;&quot; data-original=&quot;&apos;+data[em].srclist[i]+&apos;&quot;&gt;\</span><br><span class="line">                                                        &lt;/div&gt;\</span><br><span class="line">                                                &lt;/li&gt;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ulTmpl =&apos;&lt;section class=&quot;archives album&quot;&gt;&lt;h1 class=&quot;year&quot;&gt;&apos;+data[em].year+&apos; ^&lt;em&gt;&apos;+data[em].month+&apos;月&lt;/em&gt;&lt;/h1&gt;\</span><br><span class="line">                        &lt;ul class=&quot;img-box-ul&quot;&gt;&apos;+liTmpl+&apos;&lt;/ul&gt;\</span><br><span class="line">                        &lt;/section&gt;&apos;+ ulTmpl;</span><br><span class="line">        &#125;</span><br><span class="line">        ulTmpl=&apos;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=520 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=300066&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;&apos;+ulTmpl;</span><br><span class="line">        $(ulTmpl).appendTo($(&quot;.instagram&quot;));</span><br><span class="line">        changeSize();</span><br><span class="line"></span><br><span class="line">        $(&quot;img.lazt&quot;).lazyload();  </span><br><span class="line"></span><br><span class="line">        $(&quot;a[rel=example_group]&quot;).fancybox(&#123;</span><br><span class="line">        &apos;width&apos; : 450,</span><br><span class="line">        &apos;height&apos; : 450,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">        getList();</span><br><span class="line">        bind();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">$(document).bind(&quot;contextmenu&quot;,function(e)&#123;   </span><br><span class="line">          return false;   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="5-修改样式"><a href="#5-修改样式" class="headerlink" title="5.修改样式"></a>5.修改样式</h3><p>next主题目录（其他主题只要找到存放css的地方就行）：<br>vi themes/nextOne/source/css/_custom/custom.styl<br>最后添加（当然了自己可以随意更改）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">.instagram &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  min-height: 500px;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .open-ins &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px 0;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 28px;</span><br><span class="line">  top: -75px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .open-ins:hover &#123;</span><br><span class="line">  color: #657b83;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .year &#123;</span><br><span class="line">  display: inline;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album h1 em &#123;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album ul &#123;</span><br><span class="line">  min-height: 250px;</span><br><span class="line">  padding-top: 13px;</span><br><span class="line">  border-bottom: 1px solid #ddd;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album li &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  min-width: 250px;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album li:before &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album div.img-box &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin: 0 15px 8px;</span><br><span class="line">  -webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);</span><br><span class="line">  -moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);</span><br><span class="line">  box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1);</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album div.img-box .img-bg &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: -5px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  background: rgba(204,204,204,0.8);</span><br><span class="line">  -webkit-box-shadow: 0 0 0 1px rgba(0,0,0,0.04), 0 1px 5px rgba(0,0,0,0.1);</span><br><span class="line">  -moz-box-shadow: 0 0 0 1px rgba(0,0,0,0.04), 0 1px 5px rgba(0,0,0,0.1);</span><br><span class="line">  box-shadow: 0 0 0 1px rgba(0,0,0,0.04), 0 1px 5px rgba(0,0,0,0.1);</span><br><span class="line">  -webkit-transition: all 0.15s ease-out 0.1s;</span><br><span class="line">  -moz-transition: all 0.15s ease-out 0.1s;</span><br><span class="line">  -o-transition: all 0.15s ease-out 0.1s;</span><br><span class="line">  transition: all 0.15s ease-out 0.1s;</span><br><span class="line">  opacity: 0.2;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album div.img-box .img-bg:hover &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.instagram .album div.img-box img &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (max-width: 600px) &#123;</span><br><span class="line">  .instagram .album ul &#123;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .instagram .album li &#123;</span><br><span class="line">    max-width: 400px;</span><br><span class="line">  &#125;</span><br><span class="line">  .instagram .album div.img-box &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-最后修改刚才创建的photo-page"><a href="#6-最后修改刚才创建的photo-page" class="headerlink" title="6.最后修改刚才创建的photo page"></a>6.最后修改刚才创建的photo page</h3><p> vi source/photo/index.md<br> 添加：<br> jquery.min.js自己百度去下载<br> 此处的相对路径对应主题的source<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;link type=&quot;text/css&quot; href=&quot;/lib/fancybox/source/jquery.fancybox.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;div class=&quot;instagram&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;&lt;section class=&quot;archives album&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;img-box-ul&quot;&gt;&lt;/ul&gt;</span><br><span class="line">    &lt;/section&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/album.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>别忘了在主题的_config.yml中添加相册菜单呀</p><p>最后发布<br>hexo g<br>hexo s<br>就能看到相册啦</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我研究了好几天才做完这个东西的，哎还去了解了JS，对我这个后台来说前台真是好难呀&lt;br&gt;转载请注明出处&lt;br&gt;&lt;img src=&quot;http://oisa91ton.bkt.clouddn.com/1514793010805lknaui0q.png?imageslim&quot; alt=&quot;paste image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题使用的图标库</title>
    <link href="https://ciweigg.github.io/2017/12/31/hexo-next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9B%BE%E6%A0%87%E5%BA%93/"/>
    <id>https://ciweigg.github.io/2017/12/31/hexo-next主题使用的图标库/</id>
    <published>2017-12-31T13:34:00.000Z</published>
    <updated>2017-12-31T13:36:29.747Z</updated>
    
    <content type="html"><![CDATA[<p>图标库地址：<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">http://fontawesome.io/icons/</a><br><a id="more"></a><br>如果有喜欢的直接对应blog主题中的：</p><pre><code>menu_icons:  enable: true  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome  home: 对应图标库的英文</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图标库地址：&lt;a href=&quot;http://fontawesome.io/icons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://fontawesome.io/icons/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>添加404页面</title>
    <link href="https://ciweigg.github.io/2017/12/31/%E6%B7%BB%E5%8A%A0404%E9%A1%B5%E9%9D%A2/"/>
    <id>https://ciweigg.github.io/2017/12/31/添加404页面/</id>
    <published>2017-12-31T13:18:00.000Z</published>
    <updated>2017-12-31T13:23:57.250Z</updated>
    
    <content type="html"><![CDATA[<p>我使用了mp4的动态视频作为背景，感觉看大片一样呀<br><a id="more"></a><br>创建个html文件404.html 放在blog的source目录下面，hexo d的时候会自动上传github<br>如果找不到页面会自动跳转404页面的<br>可以预览我的404页面：<a href="https://ciweigg.github.io/404.html" target="_blank" rel="noopener">Dream</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">layout: false</span><br><span class="line">title: &quot;404&quot;</span><br><span class="line">---</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;404 Page not found&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;script&gt;!function(e,t,a,n,c,o,s)&#123;e.GoogleAnalyticsObject=c,e[c]=e[c]||function()&#123;(e[c].q=e[c].q||[]).push(arguments)&#125;,e[c].l=1*new Date,o=t.createElement(a),s=t.getElementsByTagName(a)[0],o.async=1,o.src=&quot;https://www.google-analytics.com/analytics.js&quot;,s.parentNode.insertBefore(o,s)&#125;(window,document,&quot;script&quot;,0,&quot;ga&quot;),ga(&quot;create&quot;,&quot;UA-100434861-1&quot;,&quot;auto&quot;),ga(&quot;send&quot;,&quot;pageview&quot;)&lt;/script&gt;&lt;/head&gt;&lt;style&gt;body&#123;margin:0;background:rgba(255,255,255,0);font-family:Lato,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,sans-serif&#125;video&#123;position:fixed;top:50%;left:50%;min-width:100%;min-height:100%;width:auto;height:auto;z-index:-100;transform:translateX(-50%) translateY(-50%);background:url(https://yixiuer.oss-cn-shanghai.aliyuncs.com/Picture/404bg.png) no-repeat;background-size:cover&#125;h1&#123;font-size:3rem;text-transform:uppercase;letter-spacing:.3rem;text-align:center;top:15%;left:5%;right:5%;position:absolute&#125;.footer&#123;font-size:2rem;position:absolute;bottom:15%;left:10%;right:10%;text-align:center&#125;a&#123;color:#5073b8;text-decoration:underline&#125;a:hover&#123;color:#a166ab;text-decoration:underline;cursor:pointer&#125;@media only screen and (max-device-width:1024px)&#123;html&#123;background:url() no-repeat rgba(255,255,255,0);background-size:100% 100%&#125;#bgvid&#123;display:none&#125;&#125;&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;video poster=&quot;http://pic.qiantucdn.com/58pic/28/19/46/84Z58PICquE_1024.jpg!/fw/780/watermark/url/L3dhdGVybWFyay12MS4zLnBuZw==/align/center&quot; id=&quot;bgvid&quot; playsinline=&quot;&quot; autoplay muted loop&gt;</span><br><span class="line">&lt;source src=&quot;http://pic.qiantucdn.com/58pic/video/28/19/46/28194684_26.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;&lt;a href=&quot;https://ciweigg.github.io/&quot;&gt;页面丢失啦，点击返回&lt;/a&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我使用了mp4的动态视频作为背景，感觉看大片一样呀&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 添加追剧功能</title>
    <link href="https://ciweigg.github.io/2017/12/31/hexo-%E6%B7%BB%E5%8A%A0%E8%BF%BD%E5%89%A7%E5%8A%9F%E8%83%BD/"/>
    <id>https://ciweigg.github.io/2017/12/31/hexo-添加追剧功能/</id>
    <published>2017-12-31T13:05:00.000Z</published>
    <updated>2017-12-31T13:12:17.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Hexo 的脚本插件是 Hexo 插件的一种特殊形式，仅当插件简单到不需要依赖 Hexo 之外的其他模块时使用。<br><img src="http://oisa91ton.bkt.clouddn.com/1514725931093d9xhh8v0.png?imageslim" alt="paste image"><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cd myblog</span><br><span class="line">mkdir -p scripts &amp;&amp; cd scripts</span><br><span class="line">vi image-stream.js</span><br><span class="line">添加如下内容：</span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">  &apos;jquery&apos;: &apos;//cdn.bootcss.com/jquery/2.1.0/jquery.min.js&apos;,</span><br><span class="line">  &apos;jquery_lazyload&apos;: &apos;//cdn.bootcss.com/jquery.lazyload/1.9.1/jquery.lazyload.min.js&apos;,</span><br><span class="line">  &apos;img_placeholder&apos;: &apos;https://ws4.sinaimg.cn/large/e724cbefgw1etyppy7bgwg2001001017.gif&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo.config.image_stream) &#123;</span><br><span class="line">  for (var key in config) &#123;</span><br><span class="line">    if (hexo.config.image_stream[key] != null) &#123;</span><br><span class="line">      config[key] = hexo.config.image_stream[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(&apos;stream&apos;, function(args, content)&#123;</span><br><span class="line">  var result = &apos;&apos;;</span><br><span class="line">  if (config[&apos;jquery&apos;]) &#123;</span><br><span class="line">    result += &apos;&lt;script src=&quot;&apos; + config[&apos;jquery&apos;] + &apos;&quot;&gt;&lt;/script&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  if (config[&apos;jquery_lazyload&apos;]) &#123;</span><br><span class="line">    result += &apos;&lt;script src=&quot;&apos; + config[&apos;jquery_lazyload&apos;] + &apos;&quot;&gt;&lt;/script&gt;&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  result += &apos;&lt;div class=&quot;hexo-img-stream&quot;&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;style type=&quot;text/css&quot;&gt;&apos;;</span><br><span class="line">  result += &apos;.hexo-image-steam-lazy &#123;display:block;&#125;.hexo-img-stream&#123;width:90%;max-width:1100px;margin:3% auto&#125;div.hexo-img-stream figure&#123;background:#fefefe;box-shadow:0 1px 2px rgba(34,25,25,0.4);margin:0 0.05% 3%;padding:3%;padding-bottom:10px;display:inline-block;max-width:25%&#125;div.hexo-img-stream figure img&#123;border-bottom:1px solid #ccc;padding-bottom:15px;margin-bottom:5px&#125;div.hexo-img-stream figure figcaption&#123;font-size:.9rem;color:#444;line-height:1.5;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&#125;div.hexo-img-stream small&#123;font-size:1rem;float:right;text-transform:uppercase;color:#aaa&#125;div.hexo-img-stream small a&#123;color:#666;text-decoration:none;transition:.4s color&#125;@media screen and (max-width:750px)&#123;.hexo-img-stream&#123;column-gap:0&#125;&#125;&apos;;</span><br><span class="line">  result += &apos;&lt;/style&gt;&apos;;</span><br><span class="line">  result += content;</span><br><span class="line">  result += &apos;&lt;/div&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;script type=&quot;text/javascript&quot;&gt;$(\&apos;img.hexo-image-steam-lazy\&apos;).lazyload(&#123; effect:\&apos;fadeIn\&apos; &#125;);&lt;/script&gt;&apos;;</span><br><span class="line">  return result;</span><br><span class="line">&#125;, &#123;ends: true&#125;);</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(&apos;figure&apos;, function(args)&#123;</span><br><span class="line">  var imgUrl = args.shift();</span><br><span class="line">  var title = args.join(&apos; &apos;);</span><br><span class="line">  var placeholder = config[&apos;img_placeholder&apos;];</span><br><span class="line"></span><br><span class="line">  var result = &apos;&lt;figure&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;img class=&quot;hexo-image-steam-lazy nofancy&quot; src=&quot;&apos; + imgUrl + &apos;&quot; data-original=&quot;&apos; + imgUrl + &apos;&quot;/&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;noscript&gt;&lt;img src=&quot;&apos; + imgUrl + &apos;&quot;/&gt;&lt;/noscript&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;figcaption&gt;&apos; + hexo.render.renderSync(&#123;text: title, engine: &apos;markdown&apos;&#125;).replace(/&lt;p&gt;/, &apos;&apos;).replace(/&lt;.p&gt;/, &apos;&apos;) + &apos;&lt;/figcaption&gt;&apos;;</span><br><span class="line">  result += &apos;&lt;/figure&gt;&apos;;</span><br><span class="line">  return result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>为了实现开箱即用，插件自带了默认配置，不做额外配置，和在站点的 _config.yml 中使用如下配置等价：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">image_stream:</span><br><span class="line">  jquery: false</span><br><span class="line">  jquery_lazyload: //cdn.bootcss.com/jquery.lazyload/1.9.1/jquery.lazyload.min.js</span><br></pre></td></tr></table></figure></p><p>在博客根目录：<br>hexo new page favorite<br>编辑生成的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% stream %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% 封面地址 [电视剧名称](电影地址) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% figure https://img3.doubanio.com/view/photo/l/public/p2505089860.webp [可惜不是你](https://movie.douban.com/subject/27026077/) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endstream  %&#125;</span><br></pre></td></tr></table></figure></p><p>电影推荐在豆瓣找哦 ^ ^ happy new year</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;Hexo 的脚本插件是 Hexo 插件的一种特殊形式，仅当插件简单到不需要依赖 Hexo 之外的其他模块时使用。&lt;br&gt;&lt;img src=&quot;http://oisa91ton.bkt.clouddn.com/1514725931093d9xhh8v0.png?imageslim&quot; alt=&quot;paste image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://ciweigg.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ciweigg.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
